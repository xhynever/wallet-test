// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/services.go

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
        repository "github.com/xhynever/wallet-test/repository/sqlc"
        services "github.com/xhynever/wallet-test/services"
)

// MockAccounts is a mock of Accounts interface.
type MockAccounts struct {
        ctrl     *gomock.Controller
        recorder *MockAccountsMockRecorder
}

// MockAccountsMockRecorder is the mock recorder for MockAccounts.
type MockAccountsMockRecorder struct {
        mock *MockAccounts
}

// NewMockAccounts creates a new mock instance.
func NewMockAccounts(ctrl *gomock.Controller) *MockAccounts {
        mock := &MockAccounts{ctrl: ctrl}
        mock.recorder = &MockAccountsMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccounts) EXPECT() *MockAccountsMockRecorder {
        return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccounts) CreateAccount(req services.CreateAccountRequest) (repository.Account, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateAccount", req)
        ret0, _ := ret[0].(repository.Account)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountsMockRecorder) CreateAccount(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccounts)(nil).CreateAccount), req)
}

// CreateTransfer mocks base method.
func (m *MockAccounts) CreateTransfer(req services.TxRequest) (repository.TransferTxResult, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateTransfer", req)
        ret0, _ := ret[0].(repository.TransferTxResult)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockAccountsMockRecorder) CreateTransfer(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockAccounts)(nil).CreateTransfer), req)
}

// DeleteAccount mocks base method.
func (m *MockAccounts) DeleteAccount(req services.DeleteRequest) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteAccount", req)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountsMockRecorder) DeleteAccount(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccounts)(nil).DeleteAccount), req)
}

// GetAccount mocks base method.
func (m *MockAccounts) GetAccount(req services.GetAccountRequest) (repository.Account, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetAccount", req)
        ret0, _ := ret[0].(repository.Account)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountsMockRecorder) GetAccount(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccounts)(nil).GetAccount), req)
}

// ListAccounts mocks base method.
func (m *MockAccounts) ListAccounts(req services.ListAccountRequest) ([]repository.Account, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ListAccounts", req)
        ret0, _ := ret[0].([]repository.Account)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockAccountsMockRecorder) ListAccounts(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockAccounts)(nil).ListAccounts), req)
}

// ListEntries mocks base method.
func (m *MockAccounts) ListEntries(req services.ListEntriesRequest) ([]repository.Entry, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ListEntries", req)
        ret0, _ := ret[0].([]repository.Entry)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockAccountsMockRecorder) ListEntries(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockAccounts)(nil).ListEntries), req)
}

// UpdateAccount mocks base method.
func (m *MockAccounts) UpdateAccount(req services.UpdateAccountRequest) (repository.Account, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateAccount", req)
        ret0, _ := ret[0].(repository.Account)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountsMockRecorder) UpdateAccount(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccounts)(nil).UpdateAccount), req)
}